import unittest
from web.app import getBusesAtStop

class TestGeneralHandler(unittest.TestCase):
    """
    # class GeneralHandler:
    - curDateTime : datetime

    !!@beforeRequest : ()
        - app
        - db
        - curDateTime
    </>
    @index : =>/busfinder
        - app
    </busfinder>
    </busfinder/:view>
    @busfinder : view? -> /busfinder.html
        - app
    </api>
    @getApiInfo : api
        - app
        - dthandler
        - db
        - curDateTime
        - collectionPrefix
        (support_jsonp)

    ===========================

    # class GtfsRoutes:

    </gtfs/trip_update>
    @tripUpdate : feed (?)
        - app
        - db
    </gtfs/vehiclePosition>
    @vehiclePosition : feed (?)
        - app
        - db


    ===========================

    # class BusHandler:

    </api/routes/active>
    @getActiveRoutes : [routes].json
    # def active:
        - app
        - db
        - collectionPrefix
        (support_jsonp)
    </api/buses/on_route/:routeId>
    @getBusesOnRoute : route.id -> [checkin].json
    # def on_route:
        - app
        - dthandler
        - db
        (support_jsonp)
    </api/buses/routes>
    </api/buses/routes/:routeIds>
    @getBusesByRoute : [route.id]? -> [checkin].json
    # def in_routes(routes):
        - app
        - dthandler
        - db
        (support_jsonp)
    </api/buses/history/:busId>
    @getBusHistory : bus.id -> [checkin].json
        - app
        - dthandler
        - db
        (support_jsonp)


    ===========================

    # class StopHandler:

    </api/stops/near/intersection/:city/:intersection>
    @getStopsNearIntersection : city -> intersection -> [stop].json
        - app
        (getStopsNear)
    </api/stops/near/:lat/:lng>
    @getStopsNear : lat -> lng -> [stop].json   # v1
        - app
        - db
        - collectionPrefix
        (support_jsonp)
    </api/stops/id/:stopIds>
    @getStopsById : ids_string -> [stop].json
        - app
        - db
        - collectionPrefix
        (support_jsonp)
    </api/stop_times/:routeId/:stopId>
    @getNextBus : route.id -> stop.id -> [stop].json
        - app
        - dthandler
        - db
        - collectionPrefix
        (support_jsonp)


    ============================

    # class StopHandlerV2:

    </api/v2/stops/near/:lat/:lng>
    @get_stops_near : lat? -> long? -> capacity? -> [stop].json # v2
        - app
        - dthandler
        - db
        - collectionPrefix
        (support_jsonp)
        (find_buses_at_stop)
    find_buses_at_stop : stop.id -> [scheduled_stop]
        - db
        - collectionPrefix
    </api/stop_times/:stopId>
    @getBusesAtStop : stop.id -> [scheduled_stop].json          # v1
        - app
        - dthandler
        (support_jsonp)
        (find_buses_at_stop)
    </api/v2/stops/:stopId>
    @get_buses_at_stop : stop.id -> [scheduled_stop].json       # v2
        - app
        - dthandler
        (support_jsonp)
        (find_buses_at_stop)

    """
    def test_get_buses_at_stop_v1():
        
